{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n\n  //props destructure\n  const [stage, setStage] = useState(createStage());\n  const [rowCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage => newStage.reduce((accumulator, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        accumulator.unshift(new Array(newStage[0].length));\n      }\n    });\n\n    const updateStage = prevStage => {\n      // clear the stage contents\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); // draw the generated tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          //valid cell of tetromino\n          if (value !== 0) {\n            //coordinates of stage\n            newStage[y + player.pos.y][x + player.pos.x] = [value, // merged: we know it should keep it in the stage\n            // otherwise set to clear\n            `${player.collided ? \"merged\" : \"clear\"}`];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage];\n};\n\n_s(useStage, \"Pt+3Ysr00nTghKPRXPJEWmEWCPY=\");","map":{"version":3,"sources":["/Users/juliadimonte/Projects/tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","rowCleared","setRowsCleared","sweepRows","newStage","reduce","accumulator","row","findIndex","cell","prev","unshift","Array","length","updateStage","prevStage","map","tetromino","forEach","y","value","x","pos","collided"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA;;AAC/C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AACA,QAAM,CAACM,UAAD,EAAaC,cAAb,IAA+BT,QAAQ,CAAC,CAAD,CAA7C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,cAAc,CAAC,CAAD,CAAd;;AAEA,UAAMC,SAAS,GAAIC,QAAD,IAChBA,QAAQ,CAACC,MAAT,CAAgB,CAACC,WAAD,EAAcC,GAAd,KAAsB;AACpC,UAAIA,GAAG,CAACC,SAAJ,CAAeC,IAAD,IAAUA,IAAI,CAAC,CAAD,CAAJ,KAAY,CAApC,MAA2C,CAAC,CAAhD,EAAmD;AACjDP,QAAAA,cAAc,CAAEQ,IAAD,IAAUA,IAAI,GAAG,CAAlB,CAAd;AACAJ,QAAAA,WAAW,CAACK,OAAZ,CAAoB,IAAIC,KAAJ,CAAUR,QAAQ,CAAC,CAAD,CAAR,CAAYS,MAAtB,CAApB;AACD;AACF,KALD,CADF;;AAQA,UAAMC,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA,YAAMX,QAAQ,GAAGW,SAAS,CAACC,GAAV,CAAeT,GAAD,IAC7BA,GAAG,CAACS,GAAJ,CAASP,IAAD,IAAWA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAxD,CADe,CAAjB,CAFiC,CAMjC;;AACAZ,MAAAA,MAAM,CAACoB,SAAP,CAAiBC,OAAjB,CAAyB,CAACX,GAAD,EAAMY,CAAN,KAAY;AACnCZ,QAAAA,GAAG,CAACW,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB;AACA,cAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACAhB,YAAAA,QAAQ,CAACe,CAAC,GAAGtB,MAAM,CAACyB,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGxB,MAAM,CAACyB,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,EAE7C;AACA;AACC,eAAEvB,MAAM,CAAC0B,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAJK,CAA/C;AAMD;AACF,SAXD;AAYD,OAbD;;AAcA,UAAI1B,MAAM,CAAC0B,QAAX,EAAqB;AACnBzB,QAAAA,WAAW;AACZ;;AACD,aAAOM,QAAP;AACD,KAzBD;;AA0BAJ,IAAAA,QAAQ,CAAEU,IAAD,IAAUI,WAAW,CAACJ,IAAD,CAAtB,CAAR;AACD,GAtCQ,EAsCN,CAACb,MAAD,EAASC,WAAT,CAtCM,CAAT;AAwCA,SAAO,CAACC,KAAD,EAAQC,QAAR,CAAP;AACD,CA9CM;;GAAMJ,Q","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  //props destructure\n  const [stage, setStage] = useState(createStage());\n  const [rowCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = (newStage) =>\n      newStage.reduce((accumulator, row) => {\n        if (row.findIndex((cell) => cell[0] === 0) === -1) {\n          setRowsCleared((prev) => prev + 1);\n          accumulator.unshift(new Array(newStage[0].length));\n        }\n      });\n\n    const updateStage = (prevStage) => {\n      // clear the stage contents\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // draw the generated tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          //valid cell of tetromino\n          if (value !== 0) {\n            //coordinates of stage\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              // merged: we know it should keep it in the stage\n              // otherwise set to clear\n              `${player.collided ? \"merged\" : \"clear\"}`,\n            ];\n          }\n        });\n      });\n      if (player.collided) {\n        resetPlayer();\n      }\n      return newStage;\n    };\n    setStage((prev) => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}
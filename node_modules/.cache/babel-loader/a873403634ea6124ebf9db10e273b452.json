{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useCallback } from \"react\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\nimport { randomTetromino } from \"../tetrominos\";\nexport const usePlayer = () => {\n  _s();\n\n  //props destructure\n  const [player, setPlayer] = useState({\n    pos: {\n      x: 0,\n      y: 0\n    },\n    tetromino: randomTetromino().shape,\n    collided: false\n  });\n\n  const updatePlayerPos = ({\n    x,\n    y,\n    collided\n  }) => {\n    setPlayer(prev => ({ ...prev,\n      pos: {\n        x: prev.pos.x += x,\n        y: prev.pos.y += y,\n        collided\n      }\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0\n      },\n      tetromino: randomTetromino().shape,\n      collided: false\n    });\n  }, []);\n  return [player, updatePlayerPos, resetPlayer];\n};\n\n_s(usePlayer, \"SbYyOsl1KokS4elk9s2k0ycEYuA=\");","map":{"version":3,"sources":["/Users/juliadimonte/Projects/tetris/src/hooks/usePlayer.js"],"names":["useState","useCallback","STAGE_WIDTH","randomTetromino","usePlayer","player","setPlayer","pos","x","y","tetromino","shape","collided","updatePlayerPos","prev","resetPlayer"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,eAAT,QAAgC,eAAhC;AAEA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAC7B;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AACnCO,IAAAA,GAAG,EAAE;AAAEC,MAAAA,CAAC,EAAE,CAAL;AAAQC,MAAAA,CAAC,EAAE;AAAX,KAD8B;AAEnCC,IAAAA,SAAS,EAAEP,eAAe,GAAGQ,KAFM;AAGnCC,IAAAA,QAAQ,EAAE;AAHyB,GAAD,CAApC;;AAMA,QAAMC,eAAe,GAAG,CAAC;AAAEL,IAAAA,CAAF;AAAKC,IAAAA,CAAL;AAAQG,IAAAA;AAAR,GAAD,KAAwB;AAC9CN,IAAAA,SAAS,CAAEQ,IAAD,KAAW,EACnB,GAAGA,IADgB;AAEnBP,MAAAA,GAAG,EAAE;AAAEC,QAAAA,CAAC,EAAGM,IAAI,CAACP,GAAL,CAASC,CAAT,IAAcA,CAApB;AAAwBC,QAAAA,CAAC,EAAGK,IAAI,CAACP,GAAL,CAASE,CAAT,IAAcA,CAA1C;AAA8CG,QAAAA;AAA9C;AAFc,KAAX,CAAD,CAAT;AAID,GALD;;AAOA,QAAMG,WAAW,GAAGd,WAAW,CAAC,MAAM;AACpCK,IAAAA,SAAS,CAAC;AACRC,MAAAA,GAAG,EAAE;AACHC,QAAAA,CAAC,EAAEN,WAAW,GAAG,CAAd,GAAkB,CADlB;AAEHO,QAAAA,CAAC,EAAE;AAFA,OADG;AAKRC,MAAAA,SAAS,EAAEP,eAAe,GAAGQ,KALrB;AAMRC,MAAAA,QAAQ,EAAE;AANF,KAAD,CAAT;AAQD,GAT8B,EAS5B,EAT4B,CAA/B;AAWA,SAAO,CAACP,MAAD,EAASQ,eAAT,EAA0BE,WAA1B,CAAP;AACD,CA3BM;;GAAMX,S","sourcesContent":["import { useState, useCallback } from \"react\";\nimport { STAGE_WIDTH } from \"../gameHelpers\";\nimport { randomTetromino } from \"../tetrominos\";\n\nexport const usePlayer = () => {\n  //props destructure\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: randomTetromino().shape,\n    collided: false,\n  });\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer((prev) => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y), collided },\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: {\n        x: STAGE_WIDTH / 2 - 2,\n        y: 0,\n      },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer];\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n\n  //props destructure\n  const [stage, setStage] = useState(createStage());\n  useEffect(() => {\n    const updateStage = prevStage => {\n      // clear the stage contents\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === \"clear\" ? [0, \"clear\"] : cell)); // draw the generated tetromino\n\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          //valid cell of tetromino\n          if (value !== 0) {\n            //coordinates of stage\n            newStage[y + player.pos.y][x + player.pos.x] = [value, // merged: we know it should keep it in the stage\n            // otherwise set to clear\n            `${player.collided ? \"merged\" : \"clear\"}`];\n          }\n        });\n      });\n\n      if (player.collided) {\n        resetPlayer();\n      }\n\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player]);\n  return [stage, setStage];\n};\n\n_s(useStage, \"5P+otx0I7S1W+XNBDZZ95jKxV+k=\");","map":{"version":3,"sources":["/Users/juliadimonte/Projects/tetris/src/hooks/useStage.js"],"names":["useState","useEffect","createStage","useStage","player","resetPlayer","stage","setStage","updateStage","prevStage","newStage","map","row","cell","tetromino","forEach","y","value","x","pos","collided","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,MAAD,EAASC,WAAT,KAAyB;AAAA;;AAC/C;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAACE,WAAW,EAAZ,CAAlC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,WAAW,GAAIC,SAAD,IAAe;AACjC;AACA,YAAMC,QAAQ,GAAGD,SAAS,CAACE,GAAV,CAAeC,GAAD,IAC7BA,GAAG,CAACD,GAAJ,CAASE,IAAD,IAAWA,IAAI,CAAC,CAAD,CAAJ,KAAY,OAAZ,GAAsB,CAAC,CAAD,EAAI,OAAJ,CAAtB,GAAqCA,IAAxD,CADe,CAAjB,CAFiC,CAMjC;;AACAT,MAAAA,MAAM,CAACU,SAAP,CAAiBC,OAAjB,CAAyB,CAACH,GAAD,EAAMI,CAAN,KAAY;AACnCJ,QAAAA,GAAG,CAACG,OAAJ,CAAY,CAACE,KAAD,EAAQC,CAAR,KAAc;AACxB;AACA,cAAID,KAAK,KAAK,CAAd,EAAiB;AACf;AACAP,YAAAA,QAAQ,CAACM,CAAC,GAAGZ,MAAM,CAACe,GAAP,CAAWH,CAAhB,CAAR,CAA2BE,CAAC,GAAGd,MAAM,CAACe,GAAP,CAAWD,CAA1C,IAA+C,CAC7CD,KAD6C,EAE7C;AACA;AACC,eAAEb,MAAM,CAACgB,QAAP,GAAkB,QAAlB,GAA6B,OAAQ,EAJK,CAA/C;AAMD;AACF,SAXD;AAYD,OAbD;;AAcA,UAAIhB,MAAM,CAACgB,QAAX,EAAqB;AACnBf,QAAAA,WAAW;AACZ;;AACD,aAAOK,QAAP;AACD,KAzBD;;AA0BAH,IAAAA,QAAQ,CAAEc,IAAD,IAAUb,WAAW,CAACa,IAAD,CAAtB,CAAR;AACD,GA5BQ,EA4BN,CAACjB,MAAD,CA5BM,CAAT;AA8BA,SAAO,CAACE,KAAD,EAAQC,QAAR,CAAP;AACD,CAnCM;;GAAMJ,Q","sourcesContent":["import { useState, useEffect } from \"react\";\nimport { createStage } from \"../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n  //props destructure\n  const [stage, setStage] = useState(createStage());\n\n  useEffect(() => {\n    const updateStage = (prevStage) => {\n      // clear the stage contents\n      const newStage = prevStage.map((row) =>\n        row.map((cell) => (cell[1] === \"clear\" ? [0, \"clear\"] : cell))\n      );\n\n      // draw the generated tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          //valid cell of tetromino\n          if (value !== 0) {\n            //coordinates of stage\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              // merged: we know it should keep it in the stage\n              // otherwise set to clear\n              `${player.collided ? \"merged\" : \"clear\"}`,\n            ];\n          }\n        });\n      });\n      if (player.collided) {\n        resetPlayer();\n      }\n      return newStage;\n    };\n    setStage((prev) => updateStage(prev));\n  }, [player]);\n\n  return [stage, setStage];\n};\n"]},"metadata":{},"sourceType":"module"}